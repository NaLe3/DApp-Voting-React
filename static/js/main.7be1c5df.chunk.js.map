{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","on","location","reload","App","useState","accounts","contract","owner","w3State","setState","voterInput","setVoterInput","proposalInput","setProposalInput","currentUser","setCurrentUser","workflowStatus","setWorkFlowStatus","proposals","setProposals","proposalWinningId","setProposalWinningId","isUserRegistered","setUserIsRegistered","useRef","useEffect","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","methods","call","getVoter","from","options","fromBlock","toBlock","getPastEvents","votersData","map","event","returnValues","voterAddress","parseInt","isRegistered","getProposals","proposalsList","events","VoterRegistered","changed","err","error","str","ProposalRegistered","alert","winningProposalID","handleChangeVoter","e","preventDefault","target","value","handleChangeProposal","handleSubmitVoter","addVoter","send","handleSubmitProposal","addProposal","syncWorkflowStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","resetVote","isOwner","vote","index","setVote","renderProposals","length","description","proposal","key","hasVoted","onClick","voteCount","className","renderStepButton","onChange","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7be1c5df.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n      window.ethereum.on('accountsChanged', async () => {\n        window.location.reload();\n      });\n\n      window.ethereum.on('chainChanged', () => {\n        window.location.reload();\n      })\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nconst App = () => {\n\n  const [w3State, setState] = useState({\n    web3: null,\n    accounts: null,\n    contract: null,\n    owner: null\n  });\n\n  const [voterInput, setVoterInput] = useState(\"\");\n  const [proposalInput, setProposalInput] = useState(\"\");\n  const [currentUser, setCurrentUser] = useState({});\n  const [workflowStatus, setWorkFlowStatus] = useState(\"0\");\n  const [proposals, setProposals] = useState([]);\n  const [proposalWinningId, setProposalWinningId] = useState(null);\n\tconst [isUserRegistered, setUserIsRegistered] = useState(false);\n\n  const inputRef = useRef();\n\n  useEffect(() => {\n    (async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n  \n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n  \n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VotingContract.abi,\n          deployedNetwork && deployedNetwork.address,\n        );\n        const owner = await instance.methods.owner().call();\n        const workflowStatus = await instance.methods.workflowStatus().call();\n\n        setState({\n          web3,\n          accounts,\n          contract: instance,\n          owner\n        });\n        setCurrentUser(currentUser);\n        setWorkFlowStatus(workflowStatus);\n\n\t\t\t\tif (accounts[0] === owner) {\n          const currentUser = await instance.methods.getVoter(accounts[0]).call({ from: accounts[0] });\n          console.log(\"currentUser\", currentUser);\n          setCurrentUser(currentUser);\n       \n\n          setUserIsRegistered(true);\n        } else {\n          const options = {\n            // filter: {\n            //     value: \"address\"\n            // },\n            fromBlock: 0,\n            toBlock: 'latest'\n          };  \n          const votersData = await instance.getPastEvents(\"VoterRegistered\", options)\n          console.log(\"votersData\", votersData);\n          votersData.map(event => {\n            if (event.returnValues.voterAddress === accounts[0]) {\n              setUserIsRegistered(true);\n\t\t\t\t\t\t\tsetCurrentUser(currentUser);\n            }\n          });\n        }\n\t\n\n        if (parseInt(workflowStatus) >= 1 && currentUser.isRegistered) {\n          const proposalsList = await instance.methods.getProposals().call({ from: accounts[0] });\n          setProposals(proposalsList);\n        }\n\n        await instance.events.VoterRegistered()\n          .on(\"data\", async event => {\n              const voterAddress = event.returnValues.voterAddress;\n              if (voterAddress === accounts[0]) {\n                  const currentUser = await instance.methods.getVoter(accounts[0]).call();\n                  setCurrentUser(currentUser);\n\t\t\t\t\t\t\t\t\tsetUserIsRegistered(true)\n              }\n              console.log(\"New voter have been registered: \" + voterAddress);\n\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n          .on(\"connected\", str => console.log(str));\n\n        await instance.events.ProposalRegistered()\n          .on(\"data\", async event => {\n              const proposalsList = await instance.methods.getProposals().call({ from: accounts[0] });\n              setProposals(proposalsList);\n              console.log(\"proposals\", proposalsList);\n              console.log(\"New proposal pushed.\");\n          })\n          .on(\"changed\", changed => console.log(changed))\n          .on(\"error\", err => console.error(err))\n          .on(\"connected\", str => console.log(str));\n      \n\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n        // if (state && state.contract && state.contract.methods) {\n          if (workflowStatus === \"5\") {\n              const { contract, owner } = w3State;\n              const proposalsList = await contract.methods.getProposals().call({ from: owner });\n              const proposalWinningId = await contract.methods.winningProposalID().call({ from: owner });\n              setProposals(proposalsList);\n              setProposalWinningId(proposalWinningId);\n          }\n    })()\n}, [workflowStatus]);\n\n  // useEffect(() => {\n  //   (function () {\n  //       if (workflowStatus === \"0\") {\n  //           setActiveStep(0);\n  //       } else if (\n  //           workflowStatus === \"1\" ||  \n  //           workflowStatus === \"2\"\n  //       ) {\n  //           setActiveStep(1);\n  //       } else if (\n  //           workflowStatus === \"3\" ||  \n  //           workflowStatus === \"4\"\n  //       ) {\n  //           setActiveStep(2);\n  //       } else if (workflowStatus === \"5\") {\n  //           setActiveStep(4);\n  //       }\n  //   })();\n  // }, [workflowStatus]);\n\n  const handleChangeVoter = (e) => {\n    e.preventDefault();\n    setVoterInput(e.target.value);\n  }\n\n  const handleChangeProposal = (e) => {\n    e.preventDefault();\n    setProposalInput(e.target.value);\n  }\n\n  const handleSubmitVoter = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.addVoter(voterInput).send({ from: owner });\n  }\n\n  const handleSubmitProposal = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.addProposal(proposalInput).send({ from: accounts[0] });\n  }\n\n  const syncWorkflowStatus = async () => {\n    const workflowStatus = await w3State.contract.methods.workflowStatus().call();\n    setWorkFlowStatus(workflowStatus);\n  }\n\n  const startProposalsRegistering = async () => {\n    const { accounts, contract, owner } = w3State;\n    await w3State.contract.methods.startProposalsRegistering().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const endProposalsRegistering = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.endProposalsRegistering().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const startVotingSession = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.startVotingSession().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const endVotingSession = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.endVotingSession().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const tallyVotes = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.tallyVotes().send({ from: owner });\n    await syncWorkflowStatus();\n  }\n\n  const resetVote = async () => {\n    const { accounts, contract, owner } = w3State;\n    await contract.methods.resetVote().send({ from: owner });\n    await syncWorkflowStatus();\n    setProposals([]);\n  }\n\n  const isRegistered = () => {\n\t\tconsole.log(\"is user registered , => \" + isUserRegistered);\n\t\treturn isUserRegistered;\n\t}\n\n  const isOwner = () => w3State.accounts[0] === w3State.owner;\n\t\n\n  const renderLoggedUser = () => {\n    if (isOwner()) {\n      return `You are owner (${w3State.owner})`;\n    }\n\n    if (isRegistered()) {\n      return `You are registered (${w3State.accounts[0]})`;\n    }\n\n    return \"You are not registered\"\n  };\n\n  const renderStepButton = () => {\n    switch (workflowStatus) {\n      case \"0\":\n        return <button onClick={startProposalsRegistering}>Start proposal registration</button>;\n      case \"1\":\n        return <button onClick={endProposalsRegistering}>End proposal registration</button>;\n      case \"2\":\n        return <button onClick={startVotingSession}>Start voting session</button>;\n      case \"3\":\n        return <button onClick={endVotingSession}>End voting session</button>;\n      case \"4\":\n        return <button onClick={tallyVotes}>Tally votes</button>;\n      case \"5\":\n        return <button onClick={resetVote}>Reset vote</button>;\n    }\n  }\n\n  const vote = async index => {\n    const { accounts, contract } = w3State;\n    await contract.methods.setVote(index).send({ from: accounts[0] });\n    const currentUser = await contract.methods.getVoter(accounts[0]).call();\n    setCurrentUser(currentUser);\n  }\n\n  const renderVoterButton = () => {\n    return (\n      <div>\n        <br /><br />\n        <input value={voterInput} onChange={handleChangeVoter} />\n        <button onClick={handleSubmitVoter}>Add voter</button>\n      </div>\n    )\n  }\n\n  const wrapperProposal = () => {\n    return (\n      <div>\n        {workflowStatus === \"1\" && (\n          <>\n            <input value={proposalInput} onChange={handleChangeProposal} />\n            <button onClick={handleSubmitProposal}>Add proposal</button>\n          </>\n        )}\n        {workflowStatus !== \"0\" && renderProposals(proposals)}\n      </div>\n    )\n  }\n\n  const renderProposals = (proposals) => {\n    if (proposals.length === 0) {\n      return <p>There is no proposal registered yet.</p>\n    }\n  \n    return (\n      <div>\n        {proposalWinningId && <b>The winner proposal is: {proposals[proposalWinningId].description}</b>}\n        <br />\n        Proposals:\n        {proposals.map((proposal, index) =>\n          <div key={index}>\n            <p>{proposal.description}</p>\n            {workflowStatus === \"3\" && !currentUser.hasVoted &&\n            <button onClick={() => vote(index)}>Vote</button>}\n            {workflowStatus === \"5\" &&\n            <div>{proposal.voteCount} {proposal.voteCount > 1 ? \"votes\" : \"vote\"}</div>}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  if (w3State.web3 === null) {\n    return <div>Loading Web3, accounts, and contract...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Voting dApp project</h1>\n      <p>Truffle react box example</p>\n      <p><strong>{renderLoggedUser()}</strong></p>\n      {isOwner() && renderStepButton()}\n      {isOwner() && workflowStatus === \"0\" && renderVoterButton()}\n      {(isOwner() || isRegistered()) && wrapperProposal()}\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}